CREATE OR REPLACE FUNCTION COPIES_AVAILABLE (B_ID INT) RETURNS INT AS $$
DECLARE
    TOTAL_COUNT INT;
    BORROWED INT;
    RES INT;
BEGIN
    SELECT SUM(COPIES_BOUGHT) INTO TOTAL_COUNT FROM ACQUISITION WHERE BOOK_ID = B_ID;
    SELECT COALESCE(COUNT(*), 0) INTO BORROWED FROM USER_BORROW_RELATION WHERE BOOK_ID = B_ID AND DATE_RETURNED IS NULL;
    RES := TOTAL_COUNT - BORROWED;
    RETURN RES;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION TYPE_OF_USER (U_ID INTEGER) 
RETURNS VARCHAR(15) AS $$
DECLARE
    U_TYPE VARCHAR(15);
BEGIN
    SELECT USER_TYPE INTO U_TYPE FROM USERS WHERE USER_ID = U_ID;
    RETURN U_TYPE;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION FINE_FOR_SINGLE_BOOK(U_ID INTEGER, B_ID INTEGER) RETURNS INTEGER AS $$
DECLARE
    FINE INTEGER;
    KEPT_DAYS INTEGER;
BEGIN
    SELECT COALESCE(UBR.DATE_RETURNED,CURRENT_DATE) - UBR.DATE_BORROWED - URP.DAYS INTO KEPT_DAYS
    FROM USER_RETURN_POLICY URP 
    JOIN USER_BORROW_RELATION UBR ON URP.USER_TYPE = TYPE_OF_USER(UBR.USER_ID) 
    WHERE UBR.USER_ID = U_ID AND UBR.BOOK_ID = B_ID;

    SELECT MIN(FS.FINE_AMOUNT) INTO FINE
    FROM FINE_STATE FS 
    WHERE KEPT_DAYS < FS.DAYS;

    RETURN COALESCE(FINE, 0);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION TOTAL_DUE(U_ID INTEGER) RETURNS INTEGER AS $$
DECLARE
    FINE INTEGER := 0;
    MY_PAID INTEGER := 0;
    R RECORD;
BEGIN
    FOR R IN SELECT BOOK_ID FROM BOOKS
    LOOP
        FINE := FINE + FINE_FOR_SINGLE_BOOK(U_ID, R.BOOK_ID);
    END LOOP;

    SELECT SUM(PAID) INTO MY_PAID FROM USER_TRANSACTON WHERE USER_ID = U_ID;

    RETURN FINE - COALESCE(MY_PAID, 0);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION IMAGE(B_ID INTEGER) 
RETURNS TEXT 
AS $$
DECLARE
    TEMP TEXT;
    IMG TEXT;
BEGIN
    TEMP := 'https://www.hachette.co.nz/graphics/CoverNotAvailable.jpg';
    SELECT IMAGE INTO IMG FROM COVER_IMAGE WHERE BOOK_ID = B_ID;
    RETURN COALESCE(IMG, TEMP);
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION book_publication(b_id INTEGER) RETURNS VARCHAR AS $$
DECLARE
    p_name VARCHAR;
BEGIN
    SELECT P.PUBLICATION_NAME INTO p_name 
    FROM PUBLISHERS P 
    JOIN BOOKS B ON B.PUBLISHER_ID = P.PUBLISHER_ID
    WHERE B.BOOK_ID = b_id;
    
    RETURN p_name;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION employee_designation(e_id INTEGER) RETURNS VARCHAR AS $$
DECLARE
    desig VARCHAR;
    shelf_managed INT;
BEGIN
    SELECT COUNT(*) INTO shelf_managed FROM shelves WHERE staff_id = e_id;
    IF shelf_managed > 0 THEN
        desig := 'Shelf Manager';
    ELSE
        desig := 'General Staff';
    END IF;
    RETURN desig;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION BOOK_COUNT_IN_SEARCHED(B_ID INTEGER) RETURNS INTEGER AS $$
DECLARE
    B_COUNT INTEGER;
BEGIN
    SELECT COUNT(*) INTO B_COUNT FROM BOOK_SEARCHED WHERE BOOK_ID = B_ID;
    RETURN B_COUNT;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION BOOK_COUNT_FOR_AUTHOR(A_ID INTEGER) RETURNS INTEGER AS $$
DECLARE
    B_COUNT INTEGER;
BEGIN
    SELECT COUNT(*) INTO B_COUNT FROM BOOK_AUTHOR_RELATION WHERE AUTHOR_ID = A_ID;
    RETURN B_COUNT;
END;
$$ LANGUAGE plpgsql;


CREATE OR REPLACE FUNCTION CURRENTLY_BORROWED_COPIES (
    B_ID INTEGER
) RETURNS INTEGER AS $$
DECLARE
    B_COUNT INTEGER;
BEGIN
    SELECT COUNT(*) INTO B_COUNT FROM USER_BORROW_RELATION WHERE BOOK_ID = B_ID AND DATE_RETURNED IS NULL AND DATE_BORROWED IS NOT NULL;
    RETURN B_COUNT;
END;
$$ LANGUAGE plpgsql;