


CREATE OR REPLACE PROCEDURE STUDENT_SIGN_UP(
    U_ID INTEGER,
    F_NAME VARCHAR(50),
    L_NAME VARCHAR(50),
    P_NUMBER VARCHAR(15),
    PSWD VARCHAR(50),
    C_LEVEL INTEGER,
    C_TERM INTEGER,
    D_CODE INTEGER
) AS $$
BEGIN
    INSERT INTO USERS(USER_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER, LIBRARY_PASSWORD, USER_TYPE)
    VALUES (U_ID, F_NAME, L_NAME, P_NUMBER, PSWD, 'student');

    INSERT INTO STUDENTS(STUDENT_ID, CURRENT_LEVEL, CURRENT_TERM, DEPARTMENT_CODE)
    VALUES (U_ID, C_LEVEL, C_TERM, D_CODE);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE STAFF_SIGN_UP(
    U_ID INTEGER,
    F_NAME VARCHAR(50),
    L_NAME VARCHAR(50),
    P_NUMBER VARCHAR(15),
    PSWD VARCHAR(50)
) AS $$
BEGIN
    INSERT INTO USERS(USER_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER, LIBRARY_PASSWORD, USER_TYPE)
    VALUES (U_ID, F_NAME, L_NAME, P_NUMBER, PSWD, 'staff');
    INSERT INTO STAFFS (STAFF_ID) VALUES (U_ID);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE TEACHER_SIGN_UP(
    U_ID INTEGER,
    F_NAME VARCHAR(50),
    L_NAME VARCHAR(50),
    P_NUMBER VARCHAR(15),
    PSWD VARCHAR(50),
    D_CODE INTEGER,
    T_DESIGNATION VARCHAR(30)
) AS $$
BEGIN
    INSERT INTO USERS(USER_ID, FIRST_NAME, LAST_NAME, PHONE_NUMBER, LIBRARY_PASSWORD, USER_TYPE)
    VALUES (U_ID, F_NAME, L_NAME, P_NUMBER, PSWD, 'teacher');
    INSERT INTO TEACHERS (TEACHER_ID, DEPARTMENT_CODE, DESIGNATION) VALUES (U_ID, D_CODE, T_DESIGNATION);
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE DELETE_REQUEST(
    U_ID INTEGER,
    B_ID INTEGER
) AS $$
DECLARE
    UR_ID INTEGER;
BEGIN
    DELETE FROM USER_BORROW_RELATION WHERE USER_ID = U_ID AND BOOK_ID = B_ID AND DATE_BORROWED IS NULL;
    SELECT UR.USER_REQUEST_ID INTO UR_ID
    FROM USER_REQUEST UR
    JOIN REQUEST_BOOK_RELATION UBR ON UR.USER_REQUEST_ID = UBR.USER_REQUEST_ID
    WHERE UR.USER_ID = U_ID AND UBR.BOOK_ID = B_ID;
    DELETE FROM USER_REQUEST WHERE USER_REQUEST_ID = UR_ID;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE DELETE_USER(
    U_ID INTEGER
) AS $$
DECLARE
    B_KEPT INTEGER;
    UR_ID INTEGER;
BEGIN
    B_KEPT:=BOOK_KEPT(U_ID);
    IF B_KEPT > 0 THEN
        RAISE EXCEPTION 'User has kept books';
    END IF;
    SELECT USER_REQUEST_ID INTO UR_ID FROM USER_REQUEST WHERE USER_ID = U_ID;
    UPDATE USERS SET IS_VISIBLE = FALSE WHERE USER_ID = U_ID;
    UPDATE STUDENTS SET IS_VISIBLE = FALSE WHERE STUDENT_ID = U_ID;
    UPDATE TEACHERS SET IS_VISIBLE = FALSE WHERE TEACHER_ID = U_ID;
    UPDATE STAFFS SET IS_VISIBLE = FALSE WHERE STAFF_ID = U_ID;
    UPDATE USER_REQUEST SET IS_VISIBLE = FALSE WHERE USER_ID = U_ID;
    UPDATE REQUEST_BOOK_RELATION SET IS_VISIBLE = FALSE WHERE USER_REQUEST_ID = UR_ID;
    UPDATE SUGGESTED_BOOKS SET IS_VISIBLE = FALSE WHERE USER_ID = U_ID;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE DELETE_BOOK(
    B_ID INTEGER
) AS $$
DECLARE
    B_COUNT INTEGER;
BEGIN
    B_COUNT:=CURRENTLY_BORROWED_COPIES(B_ID);
    IF B_COUNT > 0 THEN
        RAISE EXCEPTION 'Book is currently borrowed';
    END IF;
    UPDATE BOOKS SET IS_VISIBLE = FALSE WHERE BOOK_ID = B_ID;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE PROCEDURE RESTORE_BOOK(
    B_ID INTEGER
) AS $$
DECLARE
    FLAG BOOLEAN;
BEGIN
    SELECT IS_VISIBLE INTO FLAG FROM BOOKS WHERE BOOK_ID = B_ID;
    IF FLAG=FALSE THEN
        UPDATE BOOKS SET IS_VISIBLE = TRUE WHERE BOOK_ID = B_ID;
    END IF;
END;
$$ LANGUAGE plpgsql;